// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v3.20.1
// source: conf/conf.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Bootstrap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Server        *Server                `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Data          *Data                  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Auth          *Auth                  `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	Registry      *Registry              `protobuf:"bytes,4,opt,name=registry,proto3" json:"registry,omitempty"`
	CacheMode     *CacheMode             `protobuf:"bytes,5,opt,name=cache_mode,json=cacheMode,proto3" json:"cache_mode,omitempty"`
	Kaf           *Kafka                 `protobuf:"bytes,6,opt,name=kaf,proto3" json:"kaf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bootstrap) Reset() {
	*x = Bootstrap{}
	mi := &file_conf_conf_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bootstrap) ProtoMessage() {}

func (x *Bootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bootstrap.ProtoReflect.Descriptor instead.
func (*Bootstrap) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{0}
}

func (x *Bootstrap) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Bootstrap) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Bootstrap) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Bootstrap) GetRegistry() *Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *Bootstrap) GetCacheMode() *CacheMode {
	if x != nil {
		return x.CacheMode
	}
	return nil
}

func (x *Bootstrap) GetKaf() *Kafka {
	if x != nil {
		return x.Kaf
	}
	return nil
}

type Server struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Http          *Server_HTTP           `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	Grpc          *Server_GRPC           `protobuf:"bytes,2,opt,name=grpc,proto3" json:"grpc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server) Reset() {
	*x = Server{}
	mi := &file_conf_conf_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{1}
}

func (x *Server) GetHttp() *Server_HTTP {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *Server) GetGrpc() *Server_GRPC {
	if x != nil {
		return x.Grpc
	}
	return nil
}

type Data struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// databases存储多个数据库
	Databases     map[string]*Data_Database `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Redis         *Data_Redis               `protobuf:"bytes,2,opt,name=redis,proto3" json:"redis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_conf_conf_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2}
}

func (x *Data) GetDatabases() map[string]*Data_Database {
	if x != nil {
		return x.Databases
	}
	return nil
}

func (x *Data) GetRedis() *Data_Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

type Auth struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JwtSecret     string                 `protobuf:"bytes,1,opt,name=jwt_secret,json=jwtSecret,proto3" json:"jwt_secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Auth) Reset() {
	*x = Auth{}
	mi := &file_conf_conf_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{3}
}

func (x *Auth) GetJwtSecret() string {
	if x != nil {
		return x.JwtSecret
	}
	return ""
}

// 服务与注册
type Registry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Consul        *Registry_Consul       `protobuf:"bytes,1,opt,name=consul,proto3" json:"consul,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Registry) Reset() {
	*x = Registry{}
	mi := &file_conf_conf_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Registry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registry) ProtoMessage() {}

func (x *Registry) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registry.ProtoReflect.Descriptor instead.
func (*Registry) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{4}
}

func (x *Registry) GetConsul() *Registry_Consul {
	if x != nil {
		return x.Consul
	}
	return nil
}

// 缓存模式
type CacheMode struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CachePenetration string                 `protobuf:"bytes,1,opt,name=cache_penetration,json=cachePenetration,proto3" json:"cache_penetration,omitempty"` // 防止缓存穿透模式
	CacheBreakdown   string                 `protobuf:"bytes,2,opt,name=cache_breakdown,json=cacheBreakdown,proto3" json:"cache_breakdown,omitempty"`       // 防止缓存击穿模式
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CacheMode) Reset() {
	*x = CacheMode{}
	mi := &file_conf_conf_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheMode) ProtoMessage() {}

func (x *CacheMode) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheMode.ProtoReflect.Descriptor instead.
func (*CacheMode) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{5}
}

func (x *CacheMode) GetCachePenetration() string {
	if x != nil {
		return x.CachePenetration
	}
	return ""
}

func (x *CacheMode) GetCacheBreakdown() string {
	if x != nil {
		return x.CacheBreakdown
	}
	return ""
}

// kafka 配置
type Kafka struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bootstrap     *Kafka_Bootstrap       `protobuf:"bytes,1,opt,name=bootstrap,proto3" json:"bootstrap,omitempty"`
	Enable        *Kafka_Enable          `protobuf:"bytes,2,opt,name=enable,proto3" json:"enable,omitempty"`
	Acks          string                 `protobuf:"bytes,3,opt,name=acks,proto3" json:"acks,omitempty"`
	Retries       int32                  `protobuf:"varint,4,opt,name=retries,proto3" json:"retries,omitempty"` // 重试次数
	Group         *Kafka_Group           `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	Auto          *Kafka_Auto            `protobuf:"bytes,6,opt,name=auto,proto3" json:"auto,omitempty"`
	SubTopics     []string               `protobuf:"bytes,7,rep,name=sub_topics,json=subTopics,proto3" json:"sub_topics,omitempty"` // 订阅主题
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Kafka) Reset() {
	*x = Kafka{}
	mi := &file_conf_conf_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kafka) ProtoMessage() {}

func (x *Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kafka.ProtoReflect.Descriptor instead.
func (*Kafka) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{6}
}

func (x *Kafka) GetBootstrap() *Kafka_Bootstrap {
	if x != nil {
		return x.Bootstrap
	}
	return nil
}

func (x *Kafka) GetEnable() *Kafka_Enable {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *Kafka) GetAcks() string {
	if x != nil {
		return x.Acks
	}
	return ""
}

func (x *Kafka) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *Kafka) GetGroup() *Kafka_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Kafka) GetAuto() *Kafka_Auto {
	if x != nil {
		return x.Auto
	}
	return nil
}

func (x *Kafka) GetSubTopics() []string {
	if x != nil {
		return x.SubTopics
	}
	return nil
}

type Server_HTTP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Timeout       *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_HTTP) Reset() {
	*x = Server_HTTP{}
	mi := &file_conf_conf_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_HTTP) ProtoMessage() {}

func (x *Server_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_HTTP.ProtoReflect.Descriptor instead.
func (*Server_HTTP) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Server_HTTP) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_HTTP) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_HTTP) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Server_GRPC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Timeout       *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server_GRPC) Reset() {
	*x = Server_GRPC{}
	mi := &file_conf_conf_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server_GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_GRPC) ProtoMessage() {}

func (x *Server_GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_GRPC.ProtoReflect.Descriptor instead.
func (*Server_GRPC) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Server_GRPC) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_GRPC) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_GRPC) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Data_Database struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        string                 `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Database) Reset() {
	*x = Data_Database{}
	mi := &file_conf_conf_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Database) ProtoMessage() {}

func (x *Data_Database) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Database.ProtoReflect.Descriptor instead.
func (*Data_Database) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Data_Database) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Data_Database) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type Data_Redis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	ReadTimeout   *durationpb.Duration   `protobuf:"bytes,3,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout  *durationpb.Duration   `protobuf:"bytes,4,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
	Password      string                 `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Db            int32                  `protobuf:"varint,6,opt,name=db,proto3" json:"db,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data_Redis) Reset() {
	*x = Data_Redis{}
	mi := &file_conf_conf_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data_Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data_Redis) ProtoMessage() {}

func (x *Data_Redis) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data_Redis.ProtoReflect.Descriptor instead.
func (*Data_Redis) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Data_Redis) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Data_Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Data_Redis) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Data_Redis) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *Data_Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Data_Redis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

type Registry_Consul struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Scheme        string                 `protobuf:"bytes,2,opt,name=scheme,proto3" json:"scheme,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Registry_Consul) Reset() {
	*x = Registry_Consul{}
	mi := &file_conf_conf_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Registry_Consul) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registry_Consul) ProtoMessage() {}

func (x *Registry_Consul) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registry_Consul.ProtoReflect.Descriptor instead.
func (*Registry_Consul) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Registry_Consul) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Registry_Consul) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

type Kafka_Bootstrap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Servers       string                 `protobuf:"bytes,1,opt,name=servers,proto3" json:"servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Kafka_Bootstrap) Reset() {
	*x = Kafka_Bootstrap{}
	mi := &file_conf_conf_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kafka_Bootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kafka_Bootstrap) ProtoMessage() {}

func (x *Kafka_Bootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kafka_Bootstrap.ProtoReflect.Descriptor instead.
func (*Kafka_Bootstrap) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Kafka_Bootstrap) GetServers() string {
	if x != nil {
		return x.Servers
	}
	return ""
}

type Kafka_Enable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Idepotence    string                 `protobuf:"bytes,1,opt,name=idepotence,proto3" json:"idepotence,omitempty"`
	Auto          *Kafka_Enable_Auto     `protobuf:"bytes,2,opt,name=auto,proto3" json:"auto,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Kafka_Enable) Reset() {
	*x = Kafka_Enable{}
	mi := &file_conf_conf_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kafka_Enable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kafka_Enable) ProtoMessage() {}

func (x *Kafka_Enable) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kafka_Enable.ProtoReflect.Descriptor instead.
func (*Kafka_Enable) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Kafka_Enable) GetIdepotence() string {
	if x != nil {
		return x.Idepotence
	}
	return ""
}

func (x *Kafka_Enable) GetAuto() *Kafka_Enable_Auto {
	if x != nil {
		return x.Auto
	}
	return nil
}

type Kafka_Group struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Kafka_Group) Reset() {
	*x = Kafka_Group{}
	mi := &file_conf_conf_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kafka_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kafka_Group) ProtoMessage() {}

func (x *Kafka_Group) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kafka_Group.ProtoReflect.Descriptor instead.
func (*Kafka_Group) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{6, 2}
}

func (x *Kafka_Group) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Kafka_Auto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Offset        *Kafka_Auto_Offset     `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Kafka_Auto) Reset() {
	*x = Kafka_Auto{}
	mi := &file_conf_conf_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kafka_Auto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kafka_Auto) ProtoMessage() {}

func (x *Kafka_Auto) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kafka_Auto.ProtoReflect.Descriptor instead.
func (*Kafka_Auto) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{6, 3}
}

func (x *Kafka_Auto) GetOffset() *Kafka_Auto_Offset {
	if x != nil {
		return x.Offset
	}
	return nil
}

type Kafka_Enable_Auto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commit        string                 `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Kafka_Enable_Auto) Reset() {
	*x = Kafka_Enable_Auto{}
	mi := &file_conf_conf_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kafka_Enable_Auto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kafka_Enable_Auto) ProtoMessage() {}

func (x *Kafka_Enable_Auto) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kafka_Enable_Auto.ProtoReflect.Descriptor instead.
func (*Kafka_Enable_Auto) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{6, 1, 0}
}

func (x *Kafka_Enable_Auto) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type Kafka_Auto_Offset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reset_        string                 `protobuf:"bytes,1,opt,name=reset,proto3" json:"reset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Kafka_Auto_Offset) Reset() {
	*x = Kafka_Auto_Offset{}
	mi := &file_conf_conf_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kafka_Auto_Offset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kafka_Auto_Offset) ProtoMessage() {}

func (x *Kafka_Auto_Offset) ProtoReflect() protoreflect.Message {
	mi := &file_conf_conf_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kafka_Auto_Offset.ProtoReflect.Descriptor instead.
func (*Kafka_Auto_Offset) Descriptor() ([]byte, []int) {
	return file_conf_conf_proto_rawDescGZIP(), []int{6, 3, 0}
}

func (x *Kafka_Auto_Offset) GetReset_() string {
	if x != nil {
		return x.Reset_
	}
	return ""
}

var File_conf_conf_proto protoreflect.FileDescriptor

const file_conf_conf_proto_rawDesc = "" +
	"\n" +
	"\x0fconf/conf.proto\x12\n" +
	"kratos.api\x1a\x1egoogle/protobuf/duration.proto\"\x90\x02\n" +
	"\tBootstrap\x12*\n" +
	"\x06server\x18\x01 \x01(\v2\x12.kratos.api.ServerR\x06server\x12$\n" +
	"\x04data\x18\x02 \x01(\v2\x10.kratos.api.DataR\x04data\x12$\n" +
	"\x04auth\x18\x03 \x01(\v2\x10.kratos.api.AuthR\x04auth\x120\n" +
	"\bregistry\x18\x04 \x01(\v2\x14.kratos.api.RegistryR\bregistry\x124\n" +
	"\n" +
	"cache_mode\x18\x05 \x01(\v2\x15.kratos.api.CacheModeR\tcacheMode\x12#\n" +
	"\x03kaf\x18\x06 \x01(\v2\x11.kratos.api.KafkaR\x03kaf\"\xb8\x02\n" +
	"\x06Server\x12+\n" +
	"\x04http\x18\x01 \x01(\v2\x17.kratos.api.Server.HTTPR\x04http\x12+\n" +
	"\x04grpc\x18\x02 \x01(\v2\x17.kratos.api.Server.GRPCR\x04grpc\x1ai\n" +
	"\x04HTTP\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x1ai\n" +
	"\x04GRPC\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\"\xea\x03\n" +
	"\x04Data\x12=\n" +
	"\tdatabases\x18\x01 \x03(\v2\x1f.kratos.api.Data.DatabasesEntryR\tdatabases\x12,\n" +
	"\x05redis\x18\x02 \x01(\v2\x16.kratos.api.Data.RedisR\x05redis\x1a:\n" +
	"\bDatabase\x12\x16\n" +
	"\x06driver\x18\x01 \x01(\tR\x06driver\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x1a\xdf\x01\n" +
	"\x05Redis\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12<\n" +
	"\fread_timeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\vreadTimeout\x12>\n" +
	"\rwrite_timeout\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\fwriteTimeout\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x12\x0e\n" +
	"\x02db\x18\x06 \x01(\x05R\x02db\x1aW\n" +
	"\x0eDatabasesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.kratos.api.Data.DatabaseR\x05value:\x028\x01\"%\n" +
	"\x04Auth\x12\x1d\n" +
	"\n" +
	"jwt_secret\x18\x01 \x01(\tR\tjwtSecret\"{\n" +
	"\bRegistry\x123\n" +
	"\x06consul\x18\x01 \x01(\v2\x1b.kratos.api.Registry.ConsulR\x06consul\x1a:\n" +
	"\x06Consul\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x16\n" +
	"\x06scheme\x18\x02 \x01(\tR\x06scheme\"a\n" +
	"\tCacheMode\x12+\n" +
	"\x11cache_penetration\x18\x01 \x01(\tR\x10cachePenetration\x12'\n" +
	"\x0fcache_breakdown\x18\x02 \x01(\tR\x0ecacheBreakdown\"\xb8\x04\n" +
	"\x05Kafka\x129\n" +
	"\tbootstrap\x18\x01 \x01(\v2\x1b.kratos.api.Kafka.BootstrapR\tbootstrap\x120\n" +
	"\x06enable\x18\x02 \x01(\v2\x18.kratos.api.Kafka.EnableR\x06enable\x12\x12\n" +
	"\x04acks\x18\x03 \x01(\tR\x04acks\x12\x18\n" +
	"\aretries\x18\x04 \x01(\x05R\aretries\x12-\n" +
	"\x05group\x18\x05 \x01(\v2\x17.kratos.api.Kafka.GroupR\x05group\x12*\n" +
	"\x04auto\x18\x06 \x01(\v2\x16.kratos.api.Kafka.AutoR\x04auto\x12\x1d\n" +
	"\n" +
	"sub_topics\x18\a \x03(\tR\tsubTopics\x1a%\n" +
	"\tBootstrap\x12\x18\n" +
	"\aservers\x18\x01 \x01(\tR\aservers\x1a{\n" +
	"\x06Enable\x12\x1e\n" +
	"\n" +
	"idepotence\x18\x01 \x01(\tR\n" +
	"idepotence\x121\n" +
	"\x04auto\x18\x02 \x01(\v2\x1d.kratos.api.Kafka.Enable.AutoR\x04auto\x1a\x1e\n" +
	"\x04Auto\x12\x16\n" +
	"\x06commit\x18\x01 \x01(\tR\x06commit\x1a\x17\n" +
	"\x05Group\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x1a]\n" +
	"\x04Auto\x125\n" +
	"\x06offset\x18\x01 \x01(\v2\x1d.kratos.api.Kafka.Auto.OffsetR\x06offset\x1a\x1e\n" +
	"\x06Offset\x12\x14\n" +
	"\x05reset\x18\x01 \x01(\tR\x05resetB%Z#kratos-community/internal/conf;confb\x06proto3"

var (
	file_conf_conf_proto_rawDescOnce sync.Once
	file_conf_conf_proto_rawDescData []byte
)

func file_conf_conf_proto_rawDescGZIP() []byte {
	file_conf_conf_proto_rawDescOnce.Do(func() {
		file_conf_conf_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_conf_conf_proto_rawDesc), len(file_conf_conf_proto_rawDesc)))
	})
	return file_conf_conf_proto_rawDescData
}

var file_conf_conf_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_conf_conf_proto_goTypes = []any{
	(*Bootstrap)(nil),           // 0: kratos.api.Bootstrap
	(*Server)(nil),              // 1: kratos.api.Server
	(*Data)(nil),                // 2: kratos.api.Data
	(*Auth)(nil),                // 3: kratos.api.Auth
	(*Registry)(nil),            // 4: kratos.api.Registry
	(*CacheMode)(nil),           // 5: kratos.api.CacheMode
	(*Kafka)(nil),               // 6: kratos.api.Kafka
	(*Server_HTTP)(nil),         // 7: kratos.api.Server.HTTP
	(*Server_GRPC)(nil),         // 8: kratos.api.Server.GRPC
	(*Data_Database)(nil),       // 9: kratos.api.Data.Database
	(*Data_Redis)(nil),          // 10: kratos.api.Data.Redis
	nil,                         // 11: kratos.api.Data.DatabasesEntry
	(*Registry_Consul)(nil),     // 12: kratos.api.Registry.Consul
	(*Kafka_Bootstrap)(nil),     // 13: kratos.api.Kafka.Bootstrap
	(*Kafka_Enable)(nil),        // 14: kratos.api.Kafka.Enable
	(*Kafka_Group)(nil),         // 15: kratos.api.Kafka.Group
	(*Kafka_Auto)(nil),          // 16: kratos.api.Kafka.Auto
	(*Kafka_Enable_Auto)(nil),   // 17: kratos.api.Kafka.Enable.Auto
	(*Kafka_Auto_Offset)(nil),   // 18: kratos.api.Kafka.Auto.Offset
	(*durationpb.Duration)(nil), // 19: google.protobuf.Duration
}
var file_conf_conf_proto_depIdxs = []int32{
	1,  // 0: kratos.api.Bootstrap.server:type_name -> kratos.api.Server
	2,  // 1: kratos.api.Bootstrap.data:type_name -> kratos.api.Data
	3,  // 2: kratos.api.Bootstrap.auth:type_name -> kratos.api.Auth
	4,  // 3: kratos.api.Bootstrap.registry:type_name -> kratos.api.Registry
	5,  // 4: kratos.api.Bootstrap.cache_mode:type_name -> kratos.api.CacheMode
	6,  // 5: kratos.api.Bootstrap.kaf:type_name -> kratos.api.Kafka
	7,  // 6: kratos.api.Server.http:type_name -> kratos.api.Server.HTTP
	8,  // 7: kratos.api.Server.grpc:type_name -> kratos.api.Server.GRPC
	11, // 8: kratos.api.Data.databases:type_name -> kratos.api.Data.DatabasesEntry
	10, // 9: kratos.api.Data.redis:type_name -> kratos.api.Data.Redis
	12, // 10: kratos.api.Registry.consul:type_name -> kratos.api.Registry.Consul
	13, // 11: kratos.api.Kafka.bootstrap:type_name -> kratos.api.Kafka.Bootstrap
	14, // 12: kratos.api.Kafka.enable:type_name -> kratos.api.Kafka.Enable
	15, // 13: kratos.api.Kafka.group:type_name -> kratos.api.Kafka.Group
	16, // 14: kratos.api.Kafka.auto:type_name -> kratos.api.Kafka.Auto
	19, // 15: kratos.api.Server.HTTP.timeout:type_name -> google.protobuf.Duration
	19, // 16: kratos.api.Server.GRPC.timeout:type_name -> google.protobuf.Duration
	19, // 17: kratos.api.Data.Redis.read_timeout:type_name -> google.protobuf.Duration
	19, // 18: kratos.api.Data.Redis.write_timeout:type_name -> google.protobuf.Duration
	9,  // 19: kratos.api.Data.DatabasesEntry.value:type_name -> kratos.api.Data.Database
	17, // 20: kratos.api.Kafka.Enable.auto:type_name -> kratos.api.Kafka.Enable.Auto
	18, // 21: kratos.api.Kafka.Auto.offset:type_name -> kratos.api.Kafka.Auto.Offset
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_conf_conf_proto_init() }
func file_conf_conf_proto_init() {
	if File_conf_conf_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_conf_conf_proto_rawDesc), len(file_conf_conf_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_conf_conf_proto_goTypes,
		DependencyIndexes: file_conf_conf_proto_depIdxs,
		MessageInfos:      file_conf_conf_proto_msgTypes,
	}.Build()
	File_conf_conf_proto = out.File
	file_conf_conf_proto_goTypes = nil
	file_conf_conf_proto_depIdxs = nil
}
