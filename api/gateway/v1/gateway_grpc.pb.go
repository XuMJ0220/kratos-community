// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.1
// source: gateway/v1/gateway.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v11 "kratos-community/api/content/v1"
	v1 "kratos-community/api/user/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Gateway_Login_FullMethodName         = "/api.gateway.v1.Gateway/Login"
	Gateway_RegisterUser_FullMethodName  = "/api.gateway.v1.Gateway/RegisterUser"
	Gateway_CreateArticle_FullMethodName = "/api.gateway.v1.Gateway/CreateArticle"
	Gateway_GetArticle_FullMethodName    = "/api.gateway.v1.Gateway/GetArticle"
	Gateway_UpdateArticle_FullMethodName = "/api.gateway.v1.Gateway/UpdateArticle"
	Gateway_DeleteArticle_FullMethodName = "/api.gateway.v1.Gateway/DeleteArticle"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Gatway 服务,定义了所有对外暴露的HTTP接口
type GatewayClient interface {
	// 转发到 User 服务的 Login 接口
	Login(ctx context.Context, in *v1.LoginRequest, opts ...grpc.CallOption) (*v1.LoginReply, error)
	// 转发到 User 服务的 Register 接口
	RegisterUser(ctx context.Context, in *v1.RegisterUserRequest, opts ...grpc.CallOption) (*v1.RegisterUserReply, error)
	// 转发到 Content 服务的 CreateArticle 接口
	CreateArticle(ctx context.Context, in *v11.CreateArticleRequest, opts ...grpc.CallOption) (*v11.CreateArticleReply, error)
	// 转发到 Content 服务的 CreateArticle 接口
	GetArticle(ctx context.Context, in *v11.GetArticleRequest, opts ...grpc.CallOption) (*v11.GetArticleReply, error)
	// 转发到 Content 服务的 UpdateArticle 接口
	UpdateArticle(ctx context.Context, in *v11.UpdateArticleRequest, opts ...grpc.CallOption) (*v11.UpdateArticleReply, error)
	// 转发到 Content 服务的 DeleteArticle 接口
	DeleteArticle(ctx context.Context, in *v11.DeleteArticleRequest, opts ...grpc.CallOption) (*v11.DeleteArticlReply, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Login(ctx context.Context, in *v1.LoginRequest, opts ...grpc.CallOption) (*v1.LoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.LoginReply)
	err := c.cc.Invoke(ctx, Gateway_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) RegisterUser(ctx context.Context, in *v1.RegisterUserRequest, opts ...grpc.CallOption) (*v1.RegisterUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.RegisterUserReply)
	err := c.cc.Invoke(ctx, Gateway_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateArticle(ctx context.Context, in *v11.CreateArticleRequest, opts ...grpc.CallOption) (*v11.CreateArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v11.CreateArticleReply)
	err := c.cc.Invoke(ctx, Gateway_CreateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetArticle(ctx context.Context, in *v11.GetArticleRequest, opts ...grpc.CallOption) (*v11.GetArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v11.GetArticleReply)
	err := c.cc.Invoke(ctx, Gateway_GetArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateArticle(ctx context.Context, in *v11.UpdateArticleRequest, opts ...grpc.CallOption) (*v11.UpdateArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v11.UpdateArticleReply)
	err := c.cc.Invoke(ctx, Gateway_UpdateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteArticle(ctx context.Context, in *v11.DeleteArticleRequest, opts ...grpc.CallOption) (*v11.DeleteArticlReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v11.DeleteArticlReply)
	err := c.cc.Invoke(ctx, Gateway_DeleteArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility.
//
// Gatway 服务,定义了所有对外暴露的HTTP接口
type GatewayServer interface {
	// 转发到 User 服务的 Login 接口
	Login(context.Context, *v1.LoginRequest) (*v1.LoginReply, error)
	// 转发到 User 服务的 Register 接口
	RegisterUser(context.Context, *v1.RegisterUserRequest) (*v1.RegisterUserReply, error)
	// 转发到 Content 服务的 CreateArticle 接口
	CreateArticle(context.Context, *v11.CreateArticleRequest) (*v11.CreateArticleReply, error)
	// 转发到 Content 服务的 CreateArticle 接口
	GetArticle(context.Context, *v11.GetArticleRequest) (*v11.GetArticleReply, error)
	// 转发到 Content 服务的 UpdateArticle 接口
	UpdateArticle(context.Context, *v11.UpdateArticleRequest) (*v11.UpdateArticleReply, error)
	// 转发到 Content 服务的 DeleteArticle 接口
	DeleteArticle(context.Context, *v11.DeleteArticleRequest) (*v11.DeleteArticlReply, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServer struct{}

func (UnimplementedGatewayServer) Login(context.Context, *v1.LoginRequest) (*v1.LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGatewayServer) RegisterUser(context.Context, *v1.RegisterUserRequest) (*v1.RegisterUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedGatewayServer) CreateArticle(context.Context, *v11.CreateArticleRequest) (*v11.CreateArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedGatewayServer) GetArticle(context.Context, *v11.GetArticleRequest) (*v11.GetArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedGatewayServer) UpdateArticle(context.Context, *v11.UpdateArticleRequest) (*v11.UpdateArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedGatewayServer) DeleteArticle(context.Context, *v11.DeleteArticleRequest) (*v11.DeleteArticlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}
func (UnimplementedGatewayServer) testEmbeddedByValue()                 {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Login(ctx, req.(*v1.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RegisterUser(ctx, req.(*v1.RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.CreateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateArticle(ctx, req.(*v11.CreateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetArticle(ctx, req.(*v11.GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.UpdateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateArticle(ctx, req.(*v11.UpdateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.DeleteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteArticle(ctx, req.(*v11.DeleteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.gateway.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Gateway_Login_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _Gateway_RegisterUser_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _Gateway_CreateArticle_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _Gateway_GetArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _Gateway_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _Gateway_DeleteArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/v1/gateway.proto",
}
