// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.20.1
// source: relation/v1/relation.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRelationFollowUser = "/api.relation.v1.Relation/FollowUser"
const OperationRelationListFollowers = "/api.relation.v1.Relation/ListFollowers"
const OperationRelationListFollowings = "/api.relation.v1.Relation/ListFollowings"
const OperationRelationUnfollowUser = "/api.relation.v1.Relation/UnfollowUser"

type RelationHTTPServer interface {
	// FollowUser 关注
	FollowUser(context.Context, *FollowUserRequest) (*FollowUserReply, error)
	// ListFollowers 获取粉丝列表
	ListFollowers(context.Context, *ListFollowersRequest) (*ListFollowersReply, error)
	// ListFollowings 获取关注列表
	ListFollowings(context.Context, *ListFollowingsRequest) (*ListFollowingsReply, error)
	// UnfollowUser 取关
	UnfollowUser(context.Context, *UnfollowUserRequest) (*UnfollowUserReply, error)
}

func RegisterRelationHTTPServer(s *http.Server, srv RelationHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/users/{id}/follow", _Relation_FollowUser0_HTTP_Handler(srv))
	r.POST("/v1/users/{id}/unfollow", _Relation_UnfollowUser0_HTTP_Handler(srv))
	r.GET("/v1/users/{id}/followings", _Relation_ListFollowings0_HTTP_Handler(srv))
	r.GET("/v1/users/{id}/followers", _Relation_ListFollowers0_HTTP_Handler(srv))
}

func _Relation_FollowUser0_HTTP_Handler(srv RelationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationFollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowUser(ctx, req.(*FollowUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowUserReply)
		return ctx.Result(200, reply)
	}
}

func _Relation_UnfollowUser0_HTTP_Handler(srv RelationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnfollowUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationUnfollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnfollowUser(ctx, req.(*UnfollowUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnfollowUserReply)
		return ctx.Result(200, reply)
	}
}

func _Relation_ListFollowings0_HTTP_Handler(srv RelationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFollowingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationListFollowings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFollowings(ctx, req.(*ListFollowingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFollowingsReply)
		return ctx.Result(200, reply)
	}
}

func _Relation_ListFollowers0_HTTP_Handler(srv RelationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFollowersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationListFollowers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFollowers(ctx, req.(*ListFollowersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFollowersReply)
		return ctx.Result(200, reply)
	}
}

type RelationHTTPClient interface {
	FollowUser(ctx context.Context, req *FollowUserRequest, opts ...http.CallOption) (rsp *FollowUserReply, err error)
	ListFollowers(ctx context.Context, req *ListFollowersRequest, opts ...http.CallOption) (rsp *ListFollowersReply, err error)
	ListFollowings(ctx context.Context, req *ListFollowingsRequest, opts ...http.CallOption) (rsp *ListFollowingsReply, err error)
	UnfollowUser(ctx context.Context, req *UnfollowUserRequest, opts ...http.CallOption) (rsp *UnfollowUserReply, err error)
}

type RelationHTTPClientImpl struct {
	cc *http.Client
}

func NewRelationHTTPClient(client *http.Client) RelationHTTPClient {
	return &RelationHTTPClientImpl{client}
}

func (c *RelationHTTPClientImpl) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...http.CallOption) (*FollowUserReply, error) {
	var out FollowUserReply
	pattern := "/v1/users/{id}/follow"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelationFollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelationHTTPClientImpl) ListFollowers(ctx context.Context, in *ListFollowersRequest, opts ...http.CallOption) (*ListFollowersReply, error) {
	var out ListFollowersReply
	pattern := "/v1/users/{id}/followers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelationListFollowers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelationHTTPClientImpl) ListFollowings(ctx context.Context, in *ListFollowingsRequest, opts ...http.CallOption) (*ListFollowingsReply, error) {
	var out ListFollowingsReply
	pattern := "/v1/users/{id}/followings"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelationListFollowings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelationHTTPClientImpl) UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...http.CallOption) (*UnfollowUserReply, error) {
	var out UnfollowUserReply
	pattern := "/v1/users/{id}/unfollow"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelationUnfollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
