// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.20.1
// source: interaction/v1/interaction.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInteractionLikeArticle = "/api.interaction.v1.Interaction/LikeArticle"
const OperationInteractionUnlikeArticle = "/api.interaction.v1.Interaction/UnlikeArticle"

type InteractionHTTPServer interface {
	// LikeArticle 点赞
	LikeArticle(context.Context, *LikeArticleRequest) (*LikeArticleReply, error)
	// UnlikeArticle 取消点赞
	UnlikeArticle(context.Context, *UnlikeArticleRequest) (*UnlikeArticleReply, error)
}

func RegisterInteractionHTTPServer(s *http.Server, srv InteractionHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/article/{id}/like", _Interaction_LikeArticle0_HTTP_Handler(srv))
	r.DELETE("/v1/article/{id}/unlike", _Interaction_UnlikeArticle0_HTTP_Handler(srv))
}

func _Interaction_LikeArticle0_HTTP_Handler(srv InteractionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LikeArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInteractionLikeArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LikeArticle(ctx, req.(*LikeArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LikeArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Interaction_UnlikeArticle0_HTTP_Handler(srv InteractionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnlikeArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInteractionUnlikeArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnlikeArticle(ctx, req.(*UnlikeArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnlikeArticleReply)
		return ctx.Result(200, reply)
	}
}

type InteractionHTTPClient interface {
	LikeArticle(ctx context.Context, req *LikeArticleRequest, opts ...http.CallOption) (rsp *LikeArticleReply, err error)
	UnlikeArticle(ctx context.Context, req *UnlikeArticleRequest, opts ...http.CallOption) (rsp *UnlikeArticleReply, err error)
}

type InteractionHTTPClientImpl struct {
	cc *http.Client
}

func NewInteractionHTTPClient(client *http.Client) InteractionHTTPClient {
	return &InteractionHTTPClientImpl{client}
}

func (c *InteractionHTTPClientImpl) LikeArticle(ctx context.Context, in *LikeArticleRequest, opts ...http.CallOption) (*LikeArticleReply, error) {
	var out LikeArticleReply
	pattern := "/v1/article/{id}/like"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInteractionLikeArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InteractionHTTPClientImpl) UnlikeArticle(ctx context.Context, in *UnlikeArticleRequest, opts ...http.CallOption) (*UnlikeArticleReply, error) {
	var out UnlikeArticleReply
	pattern := "/v1/article/{id}/unlike"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInteractionUnlikeArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
