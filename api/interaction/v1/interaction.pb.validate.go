// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: interaction.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LikeArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeArticleRequestMultiError, or nil if none found.
func (m *LikeArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := LikeArticleRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return LikeArticleRequestMultiError(errors)
	}

	return nil
}

// LikeArticleRequestMultiError is an error wrapping multiple validation errors
// returned by LikeArticleRequest.ValidateAll() if the designated constraints
// aren't met.
type LikeArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeArticleRequestMultiError) AllErrors() []error { return m }

// LikeArticleRequestValidationError is the validation error returned by
// LikeArticleRequest.Validate if the designated constraints aren't met.
type LikeArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeArticleRequestValidationError) ErrorName() string {
	return "LikeArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LikeArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeArticleRequestValidationError{}

// Validate checks the field values on LikeArticleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikeArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeArticleReplyMultiError, or nil if none found.
func (m *LikeArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LikeArticleReplyMultiError(errors)
	}

	return nil
}

// LikeArticleReplyMultiError is an error wrapping multiple validation errors
// returned by LikeArticleReply.ValidateAll() if the designated constraints
// aren't met.
type LikeArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeArticleReplyMultiError) AllErrors() []error { return m }

// LikeArticleReplyValidationError is the validation error returned by
// LikeArticleReply.Validate if the designated constraints aren't met.
type LikeArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeArticleReplyValidationError) ErrorName() string { return "LikeArticleReplyValidationError" }

// Error satisfies the builtin error interface
func (e LikeArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeArticleReplyValidationError{}

// Validate checks the field values on UnlikeArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlikeArticleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlikeArticleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnlikeArticleRequestMultiError, or nil if none found.
func (m *UnlikeArticleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlikeArticleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UnlikeArticleRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return UnlikeArticleRequestMultiError(errors)
	}

	return nil
}

// UnlikeArticleRequestMultiError is an error wrapping multiple validation
// errors returned by UnlikeArticleRequest.ValidateAll() if the designated
// constraints aren't met.
type UnlikeArticleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlikeArticleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlikeArticleRequestMultiError) AllErrors() []error { return m }

// UnlikeArticleRequestValidationError is the validation error returned by
// UnlikeArticleRequest.Validate if the designated constraints aren't met.
type UnlikeArticleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlikeArticleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlikeArticleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlikeArticleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlikeArticleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlikeArticleRequestValidationError) ErrorName() string {
	return "UnlikeArticleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnlikeArticleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlikeArticleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlikeArticleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlikeArticleRequestValidationError{}

// Validate checks the field values on UnlikeArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlikeArticleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlikeArticleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnlikeArticleReplyMultiError, or nil if none found.
func (m *UnlikeArticleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlikeArticleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnlikeArticleReplyMultiError(errors)
	}

	return nil
}

// UnlikeArticleReplyMultiError is an error wrapping multiple validation errors
// returned by UnlikeArticleReply.ValidateAll() if the designated constraints
// aren't met.
type UnlikeArticleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlikeArticleReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlikeArticleReplyMultiError) AllErrors() []error { return m }

// UnlikeArticleReplyValidationError is the validation error returned by
// UnlikeArticleReply.Validate if the designated constraints aren't met.
type UnlikeArticleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlikeArticleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlikeArticleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlikeArticleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlikeArticleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlikeArticleReplyValidationError) ErrorName() string {
	return "UnlikeArticleReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UnlikeArticleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlikeArticleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlikeArticleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlikeArticleReplyValidationError{}
