// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.1
// source: interaction/v1/interaction.proto

// 1. 定义 Protobuf 包名

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Interaction_LikeArticle_FullMethodName   = "/api.interaction.v1.Interaction/LikeArticle"
	Interaction_UnlikeArticle_FullMethodName = "/api.interaction.v1.Interaction/UnlikeArticle"
)

// InteractionClient is the client API for Interaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionClient interface {
	// 点赞
	LikeArticle(ctx context.Context, in *LikeArticleRequest, opts ...grpc.CallOption) (*LikeArticleReply, error)
	// 取消点赞
	UnlikeArticle(ctx context.Context, in *UnlikeArticleRequest, opts ...grpc.CallOption) (*UnlikeArticleReply, error)
}

type interactionClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionClient(cc grpc.ClientConnInterface) InteractionClient {
	return &interactionClient{cc}
}

func (c *interactionClient) LikeArticle(ctx context.Context, in *LikeArticleRequest, opts ...grpc.CallOption) (*LikeArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeArticleReply)
	err := c.cc.Invoke(ctx, Interaction_LikeArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionClient) UnlikeArticle(ctx context.Context, in *UnlikeArticleRequest, opts ...grpc.CallOption) (*UnlikeArticleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlikeArticleReply)
	err := c.cc.Invoke(ctx, Interaction_UnlikeArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionServer is the server API for Interaction service.
// All implementations must embed UnimplementedInteractionServer
// for forward compatibility.
type InteractionServer interface {
	// 点赞
	LikeArticle(context.Context, *LikeArticleRequest) (*LikeArticleReply, error)
	// 取消点赞
	UnlikeArticle(context.Context, *UnlikeArticleRequest) (*UnlikeArticleReply, error)
	mustEmbedUnimplementedInteractionServer()
}

// UnimplementedInteractionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInteractionServer struct{}

func (UnimplementedInteractionServer) LikeArticle(context.Context, *LikeArticleRequest) (*LikeArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeArticle not implemented")
}
func (UnimplementedInteractionServer) UnlikeArticle(context.Context, *UnlikeArticleRequest) (*UnlikeArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeArticle not implemented")
}
func (UnimplementedInteractionServer) mustEmbedUnimplementedInteractionServer() {}
func (UnimplementedInteractionServer) testEmbeddedByValue()                     {}

// UnsafeInteractionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionServer will
// result in compilation errors.
type UnsafeInteractionServer interface {
	mustEmbedUnimplementedInteractionServer()
}

func RegisterInteractionServer(s grpc.ServiceRegistrar, srv InteractionServer) {
	// If the following call pancis, it indicates UnimplementedInteractionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Interaction_ServiceDesc, srv)
}

func _Interaction_LikeArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).LikeArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_LikeArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).LikeArticle(ctx, req.(*LikeArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interaction_UnlikeArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServer).UnlikeArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interaction_UnlikeArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServer).UnlikeArticle(ctx, req.(*UnlikeArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Interaction_ServiceDesc is the grpc.ServiceDesc for Interaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.interaction.v1.Interaction",
	HandlerType: (*InteractionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikeArticle",
			Handler:    _Interaction_LikeArticle_Handler,
		},
		{
			MethodName: "UnlikeArticle",
			Handler:    _Interaction_UnlikeArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaction/v1/interaction.proto",
}
