// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"kratos-community/internal/conf"
	"kratos-community/internal/kafka"
	"kratos-community/internal/notification/biz"
	"kratos-community/internal/notification/client"
	"kratos-community/internal/notification/server"
	"kratos-community/internal/registry"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confRegistry *conf.Registry, confKafka *conf.Kafka, logger log.Logger) (*kratos.App, func(), error) {
	discovery := registry.NewDiscovery(confRegistry)
	relationClient, err := client.NewRelationServiceClient(discovery)
	if err != nil {
		return nil, nil, err
	}
	notificationUseCase := biz.NewNotificationUseCase(logger, relationClient)
	kafkaConsumerClient, cleanup, err := kafka.NewKafkaConsumerClient(confKafka, logger)
	if err != nil {
		return nil, nil, err
	}
	notificationServer := server.NewNotificationServer(logger, notificationUseCase, kafkaConsumerClient)
	registrar := registry.NewRegistry(confRegistry)
	app := newApp(logger, notificationServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
